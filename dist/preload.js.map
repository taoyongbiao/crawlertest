{"version":3,"file":"preload.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;ACVA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;;;ACtBA,mEAAsD;AAUtD,uBAAuB;AACvB,wBAAa,CAAC,iBAAiB,CAAC,QAAQ,EAAE;IACxC,0DAA0D;IAC1D,EAAE,EAAE;QACF,QAAQ,EAAE,KAAK,EAAE,IAAY,EAAmB,EAAE,CAAC,MAAM,sBAAW,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC;QAC9F,SAAS,EAAE,KAAK,EAAE,IAAY,EAAE,IAAY,EAAiB,EAAE,CAC7D,MAAM,sBAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC;KACrD;IACD,OAAO,EAAE;QACP;;;;;WAKG;QACH,UAAU,EAAE,KAAK,EAAE,GAAW,EAAE,QAAkB,EAAmB,EAAE;YACrE,OAAO,MAAM,sBAAW,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;QACpE,CAAC;QAED;;;;WAIG;QACH,WAAW,EAAE,KAAK,EAAE,MAAc,EAA0B,EAAE;YAC5D,OAAO,MAAM,sBAAW,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAC1D,CAAC;QAED;;;WAGG;QACH,UAAU,EAAE,KAAK,EAAE,MAAc,EAAiB,EAAE;YAClD,OAAO,MAAM,sBAAW,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QACzD,CAAC;KACF;CACF,CAAC,CAAC","sources":["webpack://crawlertest/webpack/universalModuleDefinition","webpack://crawlertest/external commonjs \"electron\"","webpack://crawlertest/webpack/bootstrap","webpack://crawlertest/./src/main/preload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { contextBridge, ipcRenderer } from 'electron';\n\n// 定义处理后的数据类型\ninterface ProcessedData {\n  title: string;\n  links: string[];\n  contentPreview: string;\n  // 可根据实际结构扩展字段\n}\n\n// 暴露 Node.js API 给渲染进程\ncontextBridge.exposeInMainWorld('appApi', {\n  //'electron' 是一个命名空间字符串。渲染进程中将通过 window.electron 访问被暴露的功能。\n  fs: {\n    readFile: async (path: string): Promise<string> => await ipcRenderer.invoke('read-file', path),\n    writeFile: async (path: string, data: string): Promise<void> =>\n      await ipcRenderer.invoke('write-file', path, data),\n  },\n  crawler: {\n    /**\n     * 启动爬虫任务\n     * @param url - 要爬取的网址\n     * @param keywords - 关键词列表\n     * @returns 数据 ID\n     */\n    startCrawl: async (url: string, keywords: string[]): Promise<string> => {\n      return await ipcRenderer.invoke('start-crawl', { url, keywords });\n    },\n\n    /**\n     * 处理爬取到的数据\n     * @param dataId - 数据唯一标识\n     * @returns 处理后的数据\n     */\n    processData: async (dataId: string): Promise<ProcessedData> => {\n      return await ipcRenderer.invoke('process-data', dataId);\n    },\n\n    /**\n     * 打开结果文件\n     * @param dataId - 数据唯一标识\n     */\n    openResult: async (dataId: string): Promise<void> => {\n      return await ipcRenderer.invoke('open-result', dataId);\n    },\n  },\n});\n"],"names":[],"sourceRoot":""}